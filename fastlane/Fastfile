require_relative "InstrumentConfig.rb"

# Greetings, Instrument iOS developer!

##########################################################################################################
# Fastlane is a powerful iOS automation suite built on Rake.
# CircleCI includes Fastlane out of the box. We use it to manage provisioning, build and deploy.
#
# First, you need to set up provisioning and then customize the InstrumentConfig.rb file.
#
# Start here:
#
# - If joining an existing project: https://github.com/Instrument/fastlane/blob/master/Join-a-Project.md
# - If starting a new project: https://github.com/Instrument/fastlane/blob/master/Set-Up-a-Project.md
#
##########################################################################################################

# IMPORTANT: Never run `fastlane match nuke`!!! All Instrument apps in the wild will stop working!

default_platform :ios

platform :ios do

  ############################################################
  # Developer Lanes
  ############################################################

  desc "Join an existing project (passphrase required)"
  lane :provision do
    verify_setup
    # IMPORTANT: Never run `fastlane match nuke`!!! All Instrument apps in the wild will stop working!
    match(type: "development", app_identifier:[$BUNDLE_ID])
    match(type: "enterprise", app_identifier:[$BUNDLE_ID])
  end

  # Be sure to close Xcode and get your repo in a clean state before running this
  desc "Bump build number and make a commit"
  lane :bump_build do
    ensure_git_status_clean
    increment_build_number(
      xcodeproj: $PROJECT_PATH
    )
    make_build_bump_commit
  end

  # Be sure to close Xcode and get your repo in a clean state before running this
  desc "Bump patch version & commit"
  lane :bump_patch_version do
    verify_setup
    ensure_git_status_clean
    update_package_json_version(
      get_current_version(),
      increment_version_number(bump_type: "patch",
      xcodeproj:$PROJECT_PATH)
    )
    make_version_bump_commit
  end

  # Be sure to close Xcode and get your repo in a clean state before running this
  desc "Bump minor version & commit"
  lane :bump_minor_version do
    verify_setup
    ensure_git_status_clean
    update_package_json_version(
      get_current_version(),
      increment_version_number(bump_type: "minor",
      xcodeproj:$PROJECT_PATH)
    )
    make_version_bump_commit
  end

  # Be sure to close Xcode and get your repo in a clean state before running this
  desc "Bump major version & commit"
  lane :bump_major_version do
    verify_setup
    ensure_git_status_clean
    update_package_json_version(
      get_current_version(),
      increment_version_number(bump_type: "major",
      xcodeproj:$PROJECT_PATH)
    )
    make_version_bump_commit
  end

  # WARNING deletes & force-pushes target branch!
  desc "Hard delete/push to CI branch"
  lane :push_build_branch do
    verify_setup
    if $IOS_CI_BRANCH.empty?
      UI.user_error! "Oops! $IOS_CI_BRANCH isn't set - see fastlane/InstrumentConfig.rb"
    end
    ensure_git_status_clean
    starting_branch = git_branch
    unless starting_branch == $IOS_CI_BRANCH
      `if git show-ref --heads --quiet #{$IOS_CI_BRANCH}; then git branch -D #{$IOS_CI_BRANCH} --quiet; fi`
      `git checkout -b #{$IOS_CI_BRANCH}`
    end
    fix_ci_skip
    `git push -f origin #{$IOS_CI_BRANCH}`
    `git checkout #{starting_branch}` unless starting_branch == $IOS_CI_BRANCH
  end

  # To make a local production build simply run `fastlane build`
  # To build and deploy on Circle run `fastlane build build_number:$CIRCLE_BUILD_NUM appcenter_token:$APPCENTER_TOKEN`
  desc "Distribution build in fastlane/ipa"
  lane :build do |options|
    verify_setup
    build_number = options[:build_number]
    appcenter_token = $APPCENTER_TOKEN || options[:appcenter_token]
    if build_number
      setup_circle_ci
      puts "Setting build number to #{build_number}"
      increment_build_number(
        xcodeproj: $PROJECT_PATH,
        build_number: build_number
      )
    end
    # bump_build() // optional
    # IMPORTANT: Never run `fastlane match nuke`!!! All Instrument apps in the wild will stop working!
    match(type: "enterprise", app_identifier:[$BUNDLE_ID])
    if $WORKSPACE_PATH.empty?
      gym(project: $PROJECT_PATH, scheme: $SCHEME_NAME)
    else
      gym(workspace: $WORKSPACE_PATH, scheme: $SCHEME_NAME)
    end
    if appcenter_token && !$APPCENTER_GROUPS.empty?
      puts "Deploying app to AppCenter..."
      appcenter_upload(
        api_token: appcenter_token,
        owner_name: $APPCENTER_OWNER,
        app_name: $APPCENTER_APP_NAME,
        group: $APPCENTER_GROUPS,
        ipa: "./fastlane/ipa/#{$APP_NAME}.ipa",
        dsym: "./fastlane/ipa/#{$APP_NAME}.app.dSYM.zip",
        release_notes: File.read($RELEASE_NOTES_PATH),
      )
    end
  end

  ############################################################
  # Admin Lanes
  ############################################################

  # Team Leads: you will need the shared Apple password to run this lane
  desc "Admin: Set up a new project"
  lane :bootstrap do
    verify_setup
    create_app_online(
      app_name: $APP_NAME,
      app_identifier: $BUNDLE_ID,
      skip_itc: true # Don't add to iTunes Connect (which is for app store releases)
    )
    # IMPORTANT: Never run `fastlane match nuke`!!! All Instrument apps in the wild will stop working!
    match(type: "development", readonly: false, app_identifier:[$BUNDLE_ID])
    match(type: "enterprise", readonly: false, app_identifier:[$BUNDLE_ID])
  end

  # Team Leads: you will need the shared Apple password to run this lane
  desc "Admin: Register new development device"
  # Adds a device to the provisioning profile. Other devs will need to run `fastlane provision` after you do this.
  # This is not needed to install AppCenter builds!!! It only enables live debugging on device from Xcode.
  lane :add_device do
    verify_setup
    name = UI.input "Enter the new device name, like Justin's iPhone X"
    uuid = UI.input "Enter the device UUID (get this in Xcode Devices window or iTunes)"
    if name && uuid
      puts "registering #{Hash[name, uuid]}"
      register_devices(devices: Hash[name, uuid])
      # now re-provision...
      # IMPORTANT: Never run `fastlane match nuke`!!! All Instrument apps in the wild will stop working!
      match(type: "development", force: true, readonly: false, app_identifier:[$BUNDLE_ID])
      match(type: "enterprise", force: true, readonly: false, app_identifier:[$BUNDLE_ID])
    end
  end

  ############################################################
  # Utility functions
  ############################################################

  def verify_setup
    if $APP_NAME == "yourApp"
      UI.user_error! "Oops! You haven't set up your project yet in fastlane/InstrumentConfig.rb"
    end
  end

  def replace_pattern_in_file(file_name, pattern, replacement)
    text = File.read(file_name).gsub(pattern, replacement)
    File.open(file_name, 'w') {|file| file.puts text }
  end

  def append_line_to_file(file_name, text)
    File.open(file_name, 'a') {|file| file << text + "\n" }
  end

  def get_current_version()
    get_version_number(xcodeproj: $PROJECT_PATH)
  end

  def update_package_json_version(prev_version, udpated_version)
    unless $PACKAGE_JSON_PATH.empty?
      replace_pattern_in_file($PACKAGE_JSON_PATH, /(^\s*?["\']version["\']:\s*?["\'])([\d\.]*?)(["\'],$)/, "\\1#{udpated_version}\\3")
      UI.important "UPDATED PACKAGE.JSON TO VERSION #{udpated_version}"
    end
  end

  def make_version_bump_commit
    unless `git status --porcelain`.empty?
      `git add -A`
      `git commit -m "Bump version to #{get_current_version()} [ci skip]"`
      `git log -1`
      `git push origin HEAD --no-verify`
    end
  end

  def make_build_bump_commit
    unless `git status --porcelain`.empty?
      `git add -A`
      `git commit -m "Bump build [ci skip]"`
      `git log -1`
      `git push origin HEAD --no-verify`
    end
  end

  def fix_ci_skip(prefix="[automated commit]")
    pattern = /(\[ci skip\]|\[skip ci\])/
    commit_message = last_git_commit[:message]
    if pattern =~ commit_message
      commit_message = commit_message.gsub(pattern, '')
      commit_message = "#{prefix} - #{commit_message}" unless prefix.empty?
      UI.important("Adding an empty commit so CI won't be skipped:")
      UI.important(commit_message)
      UI.important("This commit will not exist on your starting branch when done.")
      `git commit --allow-empty -m "#{commit_message}"`
    end
  end

  def clear_port_8081
    node_pid = `lsof -n -i4TCP:8081 | grep LISTEN | awk '{print $2}'`
    `kill -9 #{node_pid}` unless node_pid.empty?
  end
end

platform :android do
  desc "Distribution build in android/build"
  lane :build do
    build_android_app(
      task: "assemble",
      build_type: "Release",
      project_dir: "android"
    )
  end
end